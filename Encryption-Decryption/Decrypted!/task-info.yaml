type: edu
custom_name: stage3
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.SimpleTestCase;

    import java.util.List;

    public class EncryptDecryptTest extends StageTest {
        public EncryptDecryptTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<SimpleTestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "enc\n" +
                        "Welcome to hyperskill!\n" +
                        "5",
                    "\\jqhtrj%yt%m~ujwxpnqq&"),
                new SimpleTestCase(
                    "enc\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "enc\n" +
                        "012345678\n" +
                        "1",
                    "123456789"),
                new SimpleTestCase(
                    "dec\n" +
                        "\\jqhtrj%yt%m~ujwxpnqq&\n" +
                        "5",
                    "Welcome to hyperskill!"),
                new SimpleTestCase(
                    "dec\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "dec\n" +
                        "222233334444\n" +
                        "1",
                    "111122223333")
            );
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |-
    /*
    Sam Carrillo
    7.11.2020
    --------------
    This is a program that encrypts a message
    "we found a treasure!"
    replacing each letter with the letter that
    is in the corresponding position from the end
    of the English alphabet
    (a→z, b→y, c→x, ... x→c, y →b, z→a)
     */
    package encryptdecrypt;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner input = new Scanner(System.in);
            String sourceString = input.nextLine();
            int key = input.nextInt();

            //create a character array of the String & alphabet char array
            char[] sourceArray = sourceString.toCharArray();
            char[] alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};

            //data structure for encrypting sourceArray
            for (int i = 0; i < sourceArray.length; i++) {
                //ignore spaces, add in here anything you want to ignore. can be better.
                if(sourceArray[i] == ' '){
                    continue;
                }
                for (int j = 0; j <= alphabet.length; j++) {
                    //make A follow Z if not found in first revolution
                    if (j == alphabet.length) {
                        j = 0;
                    }
                    //encrypt sourceArray with the key
                    if (sourceArray[i] == alphabet[j]) {
                        //if value after shifting > 25, adjust shifted value
                        if (j + key > alphabet.length) {
                            sourceArray[i] = alphabet[(j - 26) + key];
                            break;
                        } else {
                            sourceArray[i] = alphabet[j + key];
                            break;
                        }
                    }
                }
            }

            //print result
            String encryptedSource = new String(sourceArray);
            System.out.println(encryptedSource);
        }
    }
    /* "official solution"
    IMPROVISE
    ADAPT
    OVERCOME
    LMAO

    package encryptdecrypt;

    import java.util.Scanner;

    public class Main {
        public static void main(String[] args) {
            Scanner scanner = new Scanner(System.in);
            char[] chars = scanner.nextLine().toCharArray();
            int shift = scanner.nextInt();

            char a = 'a';
            char z = 'z';
            int size = 26;

            for (char item : chars) {
                if (item >= a && item <= z) {
                    char shiftItem = (char) (((item - a + shift) % size) + a);
                    System.out.print(shiftItem);
                } else {
                    System.out.print(item);
                }
            }
        }
    }
     */
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/247/implement
status: Unchecked
record: -1
